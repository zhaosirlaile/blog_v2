这一次主要是基础功能实现
> 目录结构：仅仅包含 src 下的编码

![1587390253643](https://zhaosirlaile.oss-cn-beijing.aliyuncs.com/contentImg/1587390253643.png)

> 注：get 中的参数是在 url地址上的；post 中的参数是在 data 中的，并不能在 url 地址中

## url 编码

实现了这个功能其实就意味着实现了 **GET** ，想要实现 **POST** 就必须加上响应头 **header**

要想传递请求，我们必须将 **URL地址** 和 **参数** 按照一定规则拼接起来，不多说，先上代码：

```typescript
// 判断类型是否为：日期
function isDate(val: any):val is Date {
    return toString.call(val) === '[object Date]';
}

// 判断类型是否为：对象
function isObject(val: any):val is Object {
    return val != null && toString.call(val) === '[object Object]';
}

// 使用 encode 将字符串转换为 url编码，保留特殊字符
encode(val: string) : string {
    return encodeURIComponent(val)
    .replace(/%40/g,'@')
    .replace(/%3A/ig,':')
    .replace(/%24/g,'$')
    .replace(/%2C/ig,',')
    .replace(/%20/g,'+')
    .replace(/%5B/ig,'[')
    .replace(/%5D/g,']')
}

// 主函数：拼接 url 和 参数，并把处理过后的地址返回
function buildURL(url: string, params?: any):string {
    if(!params) return url;

    const parts:string[] = []; 

    Object.keys(params).forEach((key) => {
        const val = params[key];
        if(val === null || typeof val === 'undefined') {
            return
        }
        let values = [];
        if(Array.isArray(val)) {
            values = val;
            key += '[]';
        }else {
            values = [val];
        }
        values.forEach((val) => {
            if(isDate(val)){
                val = val.toISOString();
            }else if(isObject(val)) {
                val = JSON.stringify(val);
            }
            parts.push(`${encode(key)}=${encode(val)}`);
        })
    })
    let serializedParams = parts.join('&');
    if(serializedParams) {
        const markIndex = url.indexOf('#');
        if(markIndex !== -1) {
            url = url.slice(0,markIndex);
        }
        
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;

    }
    return url;
}


```

规则：

- **params** 中每一项中，属性名与数据之间使用 `=` 进行连接，项与项之间使用 `&` 进行连接，url 地址 与 params (参数) 使用 `?` 进行连接
- 在进行数组拼接时，属性名后面加上`[]`，例如：`foo: ['bar', 'baz']` 就会转换为 `foo[]=bar&foo[]=baz`
- 在进行对象类型拼接，把对象按照 `JSON.stringify` 转换字符串，而后进行拼接
- 处理日期的时候，使用 `.toISOString` 将其转换为字符串，进行连接
- 如果你的 url 地址中出现了 `#` (hash 值)时，会忽略 `#` 后的地址(包含 # 号)，
- 字符串中还要容纳一些特殊字符：`@`、`:`、`$`、`,`、` `(空格) 

> 注：字符串中的空格转换为 `+` 号

## header

这里的 header 表示的是 **请求头**

我们使用 axios 知道，**header** 是一个对象，我们可以使用 `.setRequestHeader` 来进行设置header的参数，但在之前需要进行一些处理：

```typescript
// 主要是将一些不规范的写法规范化，例如：'content-type' 必须是 'Content-Type' 才是有效的
function normalizeHeaderName(headers: any, normalizedName:string):void {
    if(!headers) {
        return
    }
    Object.keys(headers).forEach((name) => {
        if(name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()){
            headers[normalizedName] = headers[name];
            delete headers[name];
        }
    })
}

function processHeaders (headers: any, data: any) :any {
    normalizeHeaderName(headers, 'Content-Type');

    if(isPlainObject(data)) {
        if(headers && headers['Content-Type']) {
            headers['Content-Type'] = 'application/json;charset=utf-8';
        }
    }

    return headers;
}
```

`Content-Type`默认是 `text/plain;charset=UTF-8`，如果你的 data 使用的是 json 格式的话，`Content-Type` 就应该是 `application/json;charset=UTF-8`，否则服务器那边是接收不到的

## promise

应该都了解 axios 中获取数据通过 promise 的 then，处理错误信息通过 promise 的 catch，如下：

```typescript
import {AxiosRequestConfig,AxiosPromise,AxiosResponse} from './types';
import {parseHeaders} from './helpers/header';
function xhr(config:AxiosRequestConfig) : AxiosPromise {
    return new Promise((reslove,reject)=> {
        const {data = null,url,method='get',params,headers,responseType} = config;
        const request = new XMLHttpRequest();
        
        if(responseType) request.responseType = responseType;

    
        request.onreadystatechange = function handleLoad() {
            if(request.readyState !== 4) {
                return;
            }

            const responseHeaders = request.getAllResponseHeaders();
            const responseDate = responseType !== 'text' ? request.response : request.responseText;
            const response:AxiosPromise = {
                data:responseDate,
                status:request.status,
                statusText: request.statusText,
                headers: parseHeaders(responseHeaders),
                config,
                request,
            }
            reslove(response);
        }

        request.open(method.toUpperCase(),url,true);

        Object.keys(headers).forEach((name) => {
            if(data === null && name.toLocaleLowerCase() === 'content-type') {
                delete headers[name];
            }
            request.setRequestHeader(name,headers[name]);
        })

        request.send(data);
    })

}
```

使用 **Promise** 中的 **resolve** 进行传递，这个还没写 error （异常），返回一个对象，大概就这样了

好了，看一下全部代码吧！

## 全部代码

**helper目录**

data.ts：

 ```typescript
import {isPlainObject} from './util';
export function transformRequest(data: any):any {
    if(isPlainObject(data)) {
        return JSON.stringify(data);
    }
    return data;
}

export function transformResponse(data: any):any {
    if(typeof data === 'string') {
        try{
            data = JSON.parse(data);
        } catch (e) {
            // do nothing;
        }
    }
    return data;
}
 ```

header.ts：

```typescript
import { isPlainObject } from "./util";

function normalizeHeaderName(headers: any, normalizedName:string):void {
    if(!headers) {
        return
    }
    Object.keys(headers).forEach((name) => {
        if(name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()){
            headers[normalizedName] = headers[name];
            delete headers[name];
        }
    })
}

export function processHeaders (headers: any, data: any) :any {
    normalizeHeaderName(headers, 'Content-Type');

    if(isPlainObject(data)) {
        if(headers && headers['Content-Type']) {
            headers['Content-Type'] = 'application/json;charset=utf-8';
        }
    }

    return headers;
}

export function parseHeaders(headers: string) :any {
    let parsed = {};
    if(!headers) {
        return parsed;
    }
    headers.split('\r\n').forEach((line) => {
        let [key,val] = line.split(':');
        key = key.trim().toLowerCase();
        if(!key) {
            return;
        }
        if(val) {
            val = val.trim();
        }
        parsed[key] = val;
    })
    return parsed;
}
```

url.ts：

```typescript

/**
 * 
 * @string url url地址
 * @any params 参数 (可选)
 */
import {isDate,isPlainObject} from './util';

function encode(val: string) : string {
    return encodeURIComponent(val)
    .replace(/%40/g,'@')
    .replace(/%3A/ig,':')
    .replace(/%24/g,'$')
    .replace(/%2C/ig,',')
    .replace(/%20/g,'+')
    .replace(/%5B/ig,'[')
    .replace(/%5D/g,']')
}

export function buildURL(url: string, params?: any):string {
    if(!params) return url;

    const parts:string[] = []; 

    Object.keys(params).forEach((key) => {
        const val = params[key];
        if(val === null || typeof val === 'undefined') {
            return
        }
        let values = [];
        if(Array.isArray(val)) {
            values = val;
            key += '[]';
        }else {
            values = [val];
        }
        values.forEach((val) => {
            if(isDate(val)){
                val = val.toISOString();
            }else if(isPlainObject(val)) {
                val = JSON.stringify(val);
            }
            parts.push(`${encode(key)}=${encode(val)}`);
        })
    })
    let serializedParams = parts.join('&');
    if(serializedParams) {
        const markIndex = url.indexOf('#');
        if(markIndex !== -1) {
            url = url.slice(0,markIndex);
        }
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;

    }
    return url;
}
```

util.ts：

```typescript
/**
 * 公共方法
 */
const toString = Object.prototype.toString;

export function isDate(val: any):val is Date {
    return toString.call(val) === '[object Date]';
}


export function isPlainObject(val: any):val is Object {
    return toString.call(val) === '[object Object]'
}
```

**types目录**

index.ts

```typescript
export type Method = 'get' | 'GET' | 'delete' | 'Delete' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH';


export interface AxiosRequestConfig {
    url: string,
    method?:Method,
    data?:any,
    params?:any,
    headers?:any,
    responseType?:XMLHttpRequestResponseType,
}

export interface AxiosResponse {
    status:number,
    statusText: string,
    headers: any,
    config: AxiosRequestConfig,
    requst:any,
    data:any,
}

export interface AxiosPromise extends Promise<AxiosResponse>{
}
```

**根目录**

index.ts：

```typescript
import {AxiosRequestConfig,AxiosPromise} from './types';
import xhr from './xhr';
import { buildURL } from './helpers/url';
import {transformRequest,transformResponse} from './helpers/data';
import { processHeaders } from './helpers/header';

function axios (config :AxiosRequestConfig) : AxiosPromise {
    processConfig(config);
    return xhr(config).then(res => {
        return transformResponseData(res);
    });
}

function processConfig(config: AxiosRequestConfig): void {
    config.url = transformURL(config);
    config.headers = transformHeaders(config);
    config.data = transformRequestData(config);
}

function transformURL (config: AxiosRequestConfig) :string {
    const {url,params} = config;
    return buildURL(url,params);
}

function transformRequestData (config: AxiosRequestConfig) : any {
    return transformRequest(config.data);
}

function transformHeaders(config: AxiosRequestConfig):any {
    const {headers={},data} = config;
    return processHeaders(headers,data);
}

function transformResponseData(res:AxiosPromise):AxiosPromise {
    res.data = transformResponse(res.data);
    return res;
}

export default axios;
```

xhr.ts：

```typescript
import {AxiosRequestConfig,AxiosPromise,AxiosResponse} from './types';
import {parseHeaders} from './helpers/header';
export default function xhr(config:AxiosRequestConfig) : AxiosPromise {
    return new Promise((reslove,reject)=> {
        const {data = null,url,method='get',params,headers,responseType} = config;
        const request = new XMLHttpRequest();
        
        if(responseType) request.responseType = responseType;

    
        request.onreadystatechange = function handleLoad() {
            if(request.readyState !== 4) {
                return;
            }

            const responseHeaders = request.getAllResponseHeaders();
            const responseDate = responseType !== 'text' ? request.response : request.responseText;
            const response:AxiosPromise = {
                data:responseDate,
                status:request.status,
                statusText: request.statusText,
                headers: parseHeaders(responseHeaders),
                config,
                request,
            }
            reslove(response);
        }

        request.open(method.toUpperCase(),url,true);

        Object.keys(headers).forEach((name) => {
            if(data === null && name.toLocaleLowerCase() === 'content-type') {
                delete headers[name];
            }
            request.setRequestHeader(name,headers[name]);
        })

        request.send(data);
    })

}
```

