## Context

**Context** 提供了一种方式，能够让数据在组件数中传递而不必一级一级手动传递，可以把 **Context** 开成是一种全局变量

其实 **Context** 是 **Provider** （生产者） 和 **Consumer** （消费者）共同来实现的，通过这两个标签我们可以使用 **Context**

### React.createContext

```jsx
const MyContext = React.createContext(defaultValue);
```

该代码创建了一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 `Provider` 中读取到当前的 context 值。

**只有**当组件所处的树中没有匹配到 Provider 时，也就是没有`Context.Provider`，其 `defaultValue` 参数才会生效。一般我们的业务中是不会用到这个特性的，但是做单元测试的时候这个特性很有用

### Context.Provider

```jsx
<MyContext.Provider value={/* 某个值 */}>
</MyContext.Provider>
```

每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。

Provider 接收一个 `value` 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。

当 Provider 的 `value` 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 `shouldComponentUpdate` 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新

### Context.Consumer

```jsx
<Context.Consumer>
    {value => /* 基于 context 值进行渲染,这里写的是一些jsx  */}
</Context.Consumer>
```

这里，React 组件也可以订阅到 context 变更。这能让你在函数式组件中完成订阅 context。

这需要函数作为子元素（function as a child）这种做法。这个函数接收当前的 context 值，返回一个 React 节点。传递给函数的 `value` 值等同于往上组件树离这个 context 最近的 Provider 提供的 `value` 值。如果没有对应的 Provider，`value` 参数等同于传递给 `createContext()` 的 `defaultValue`

**实例**：

```jsx
import React,{createContext, Component} from 'react';
import './App.css';

const BatteryContest = createContext(90);	// 默认值是 90,当 <BttryContest.Provider> 标签不提供时，使用默认值

// 多个 context
const OnlineContest = createContext();

class Middle extends Component{
  render(){
    return (
      <div>
        <h1>middle</h1>
        <Leaf/>
      </div>
    )
  }
}
class Leaf extends Component {
    // 多个 contest 嵌套
  render(){
    return (
      <BatteryContest.Consumer>
        {
          x => (
            <OnlineContest.Consumer>
              {
                online => <h1>Battery: {x}, Online: {String(online)}</h1>
              }
            </OnlineContest.Consumer>
          )
        }

      </BatteryContest.Consumer>
    )
  }
}

class App extends Component{
  state = {
    battery: 60,
    online: false,
  }
  render(){
    const {battery,online} = this.state;
    return (
      <BatteryContest.Provider value={battery}>
        <OnlineContest.Provider value={online}>
          <button 
            type="button" 
            onClick={() => {
              this.setState({
                battery: battery - 1,   
              })
            }}
          >Press</button>
          <button 
            type="button" 
            onClick={() => {
              this.setState({
                online: !online,   
              })
            }}
          >Switch</button>
          <Middle/>
        </OnlineContest.Provider>
      </BatteryContest.Provider>
    );
  }
}

export default App;

```

> 注意：千万不要乱使用 **Contest** ，因为这会失去组件的独立性

### class.contextType

```jsx
class MyClass extends React.Component {
  componentDidMount() {
    let value = this.context;
    /* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */
  }
  componentDidUpdate() {
    let value = this.context;
    /* ... */
  }
  componentWillUnmount() {
    let value = this.context;
    /* ... */
  }
  render() {
    let value = this.context;
    /* 基于 MyContext 组件的值进行渲染 */
  }
}
MyClass.contextType = MyContext;
```

挂载在 class 上的 `contextType` 属性会被重赋值为一个由 `React.createContext()`创建的 Context 对象。这能让你使用 `this.context` 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。

```jsx
class MyClass extends React.Component {
  static contextType = MyContext;
  render() {
    let value = this.context;
    /* 基于这个值进行渲染工作 */
  }
}
```

其实 **contextType** 是一个静态变量，我们创建的 **Context对象** 需要挂载到这个变量上，进而我们可以在render函数中通过 **this.context** 来获取这个 **Provider** 的 **value** 值，就不用向上一小节那样还要通过 **Consumer** 和 函数式组件那样了写了，方便了很多。

## laze

我们应该了解过，web 图片的懒加载，当页面滚动到某图片时才进行加载图片，向网络发展请求

不知道大家使用过 **webpack** 中使用动态 `import()` 的方式导入第三方的函数库或者是组件没，尤其是和前端路由搭配使用更是好用

我们要了解 **打包** 是一个非常好用的技术，但随着你的应用的增大，你的代码包也会变得越来越大。尤其还要使用一些体积庞大的第三方库的情况下。当我们初次请求的时候很可能会造成因代码库体积过大而导致加载时间过长。

因此，为了避免搞出体积庞大的代码包，我们需要对代码进行分割，这种技术就是 **代码分割**。

对你的应用进行代码分割能够帮助你“懒加载”当前用户所需要的内容，能够显著地提高你的应用性能。尽管并没有减少应用整体的代码体积，但你可以避免加载用户永远不需要的代码，并在初始加载的时候减少所需加载的代码量。

**React.lazy** 函数能让你像渲染常规组件一样处理动态引入（的组件），不过这个需要和 **Suspense** 标签进行配合

```jsx
const OtherComponent = React.lazy(() => import('./OtherComponent'));
```

此代码将会在组件首次渲染时，自动导入包含 `OtherComponent` 组件的包。

`React.lazy` 接受一个函数，这个函数需要动态调用 `import()`。它必须返回一个 `Promise`，该 Promise 需要 resolve 一个 `defalut` export 的 React 组件。

然后应在 `Suspense` 组件中渲染 lazy 组件，如此使得我们可以使用在等待加载 lazy 组件时做优雅降级（如 loading 指示器等）。

```jsx
import React, { Suspense } from 'react';

const OtherComponent = React.lazy(() => import('./OtherComponent'));

function MyComponent() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <OtherComponent />
      </Suspense>
    </div>
  );
}
```

`fallback` 属性接受任何在组件加载过程中你想展示的 React 元素。你可以将 `Suspense` 组件置于懒加载组件之上的任何位置。你甚至可以用一个 `Suspense` 组件包裹多个懒加载组件。

如果我所分割的代码文件因为网络问题而没有加载进来怎么办。这就需要下一小节要讲的 **异常捕获边界** 了

## 异常捕获边界

异常捕获边界（Error boundaries）：如果模块加载问题（也就是网络加载失败），它会触发一个错误，我们最好处理这个错误，否则整个页面都会报错，最好还是捕获这种错误，并且返回合理的提示信息。

其实有两种办法，如果一个 class 组件中定义了 `static getDerivedStateFromError()`或 `componentDidCatch()` 这两个生命周期方法中的任意一个（或两个）时，那么它就变成一个错误边界。当抛出错误后，请使用 `static getDerivedStateFromError()` 渲染备用 UI ，使用 `componentDidCatch()` 打印错误信息。

```jsx
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // 更新 state 使下一次渲染能够显示降级后的 UI
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // 你同样可以将错误日志上报给服务器
    logErrorToMyService(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // 你可以自定义降级后的 UI 并渲染
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children; 
  }
}
```

实例如下：

```jsx
import React,{lazy, Component, Suspense} from 'react';
import './App.css';

const About = lazy(() => import('./About'));

class App extends Component {
  state={
    hasError: false,
  }
  componentDidCatch(error,errInfo){	// 第一种
    console.log(error,errInfo)
    console.log('异常');
    this.setState({
      hasError: true,
    })
  }
  // static getDerivedStateFromError() {	// 第二种
  //   return {
  //     hasError: true,
  //   }
  // }
  render(){
    if(this.state.hasError) {
      return <div>error</div>
    }
    return (
      <div>
        <Suspense fallback={<div>loading</div>}>
          <About></About>
        </Suspense>
      </div>
    )
  }
}

export default App;
```

都是通过设置一个标志位来实现 UI 降级渲染

## 性能优化

这里的性能优化都是手动的，特指的就是那些因为父组件的 state 更改，进而导致其无关的子组件也会进行渲染，增加性能开销。

### shouldComponentUpdate 

这是一个生命周期函数，该函数的作用是每当 **state** 或 **props** 的值有变化时，可以通过返回 **True** 或者 **False** 来进行判断是否组件需要进行 **render** （渲染）

```jsx
shouldComponentUpdate(nextProps,nextState) {
    if(nextProps.name === this.props.name) {
        return false;
    }
    return true;
}
```

它由两个参数，看名字就应该知道分别代表什么意思，我这里就不说了，就是通过手动比对 **props** 和 **state** 来判断是否需要更新

例子：

```jsx
import React,{PureComponent,Component } from 'react';
import './App.css';

class Foo extends Component {
  shouldComponentUpdate(nextProps,nextState) {
    if(nextProps.name === this.props.name) {
      return false;
    }
    return true;
  }
  render(){
    console.log('Foo render')
    return null
  }
}


class App extends Component {
  state={
    count:0,
  }
  render(){
    return (
      <div>
        <button
          onClick={()=>{
            this.setState({
              count:this.state.count +1,
            })
          }}
        >Add</button>
        <Foo name="Mike"></Foo>
      </div>
    )
  }
}

export default App;
```

> 注意：你发现没有，如果的子组件很多，更新一次影响的子组件可很优先，那每一个不受影响的子组件都需要手动写那多麻烦呀，因此我们可以使用下面的方法

### React.PureComponent

大部分情况下，你可以使用 `React.PureComponent` 来代替手写 `shouldComponentUpdate`。但它只进行浅比较，所以当 props 或者 state 某种程度是可变的话，浅比较会有遗漏，那你就不能使用它了。当数据结构很复杂时，情况会变得麻烦。例如，你想要一个 `ListOfWords` 组件来渲染一组用逗号分开的单词。它有一个叫做 `WordAdder` 的父组件，该组件允许你点击一个按钮来添加一个单词到列表中。

> 什么是 **浅比较** ？就是只会进行判断值是否改变，这里的值指的是地址的意思，如果你传入的是对象，只有当对象的地址改变该渲染才会执行

还有如果你每一次传入的都是一个新的对象，那就会每一次都会进行创建，这里的对象指的是这种函数`{()=>{}}` （这种写在子组件上的匿名函数），因为每一次的值是不一样的，所以每一次都会触发更新

### React.memo

还有就是把子组件写成无状态组件，如果你的组件在相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 `React.memo` 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。

`React.memo` 仅检查 props 变更。如果函数组件被 `React.memo` 包裹，且其实现中拥有 `useState` 或 `useContext` 的 Hook，当 context 发生变化时，它仍会重新渲染。

```jsx
const MyComponent = React.memo(function MyComponent(props) {
  /* 使用 props 渲染 */
}); //默认情况
```

默认情况下其只会对复杂对象做浅层对比

如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。

```jsx
function MyComponent(props) {
  /* 使用 props 渲染 */
}
function areEqual(prevProps, nextProps) {
  /*
  如果把 nextProps 传入 render 方法的返回结果与
  将 prevProps 传入 render 方法的返回结果一致则返回 true，
  否则返回 false
  */
}
export default React.memo(MyComponent, areEqual);
```

> 注意：与 class 组件中 `shouldComponentUpdate()`方法不同的是，如果 props 相等，`areEqual` 会返回 `true`；如果 props 不相等，则返回 `false`。这与 `shouldComponentUpdate` 方法的返回值相反。

## Fragment

在以前，return 返回的内容只能是一个更节点，需要一个包裹元素。例如下面：

```jsx
class Table extends React.Component {
  render() {
    return (
      <table>
        <tr>
          <Columns />
        </tr>
      </table>
    );
  }
}
```

现在有了 **Fragment** 就可以返回多个节点，并且渲染时 **Fragment** 不会编译为包裹元素。

```jsx
render() {
  return (
    <React.Fragment>
      <ChildA />
      <ChildB />
      <ChildC />
    </React.Fragment>
  );
}
```

如果你不想引用 **Fragment** ，你还可以使用 `<></>` ，这是一种简便的写法，当然他们还是有区别的，比如 **Fragment** 是有 **key** 属性的，而空标签是没有的。如果渲染列表时，还是要用到 **Fragment** 。

```jsx
class Columns extends React.Component {
  render() {
    return (
      <>
        <td>Hello</td>
        <td>World</td>
      </>
    );
  }
}
```

## Refs

**ref** 就是拿来获取元素的，操作元素最好少用，如果能通过state做到的事情，就不应该使用 refs 在你的 app 中“让事情发生”。过度使用ref并不符合数据驱动的思想

react 中的 ref 有三种绑定方式

- string 类型绑定
- react.CreateRef()
- 函数 类型绑定

### string 类型绑定

```jsx
import React from 'react';

class App extends React.Component {
    handleClick = () => {
        console.log(this.refs.inputRef)
    }
    render() {
        return (
        	<div>
            	<p onClick={this.handleClick} ref="name">赵sir</p>
            </div>
        )
    }
}
```

### React.createRef()

```jsx
import React from 'react';

class App extends React.Component {
    pRef = React.createRef();
    handleClick = () => {
        console.log(this.pRef.current)
    }
    render() {
        return (
        	<div>
            	<p onClick={this.handleClick} ref={this.pRef}>赵sir</p>
            </div>
        )
    }
}
```

**pRef** 是一个对象，其下面挂载的 **current** 就是想要拿到的元素

### 函数类型绑定

```jsx
import React from 'react';

class App extends React.Component {
    pRef = null
    handleClick = () => {
        console.log(this.pRef)
    }
    render() {
        return (
        	<div>
                <p onClick={this.handleClick} ref={(el) =>{
                        this.pRef = el;
                    }}>赵sir</p>
            </div>
        )
    }
}
```

## 高级组件

高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。简单来说，**高阶组件就是，参数作为组件，返回一个新的组件的函数**

你一定碰到过高阶组件，例如 `react-redux` 中的 `connect(null,null)(component)` ，他就用到了 **HOC**

 这里写一个简单的 HOC

```jsx
import React,{Component} from 'react';

const MyContainer = (WraooedComponent) => 
    
    class extends Component {
        render(){
            return <WrappedComponent {...this.props} />
        }
    }
}

// 用法
class MyComponent extends Component{
    //...

}
export default MyContainer(MyComponent);
```

这里就不多写，想掌握HOC，还是要在具体业务中使用过了，才能理解。

> 注意：HOC，不会改变原始的组件，更多的是在组件上加点东西，例如方法、属性等。

好了，差不多就这些了!