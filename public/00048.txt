> **TypeScript** 是 **JavaScript** 的超集



## 安装

```shell
npm i typescript -g
```

## 使用

```shell
tsc xx.ts文件路径 输出文件路径
```

## 数据类型

**TypeScript** 包含 **JavaScript** 的类型，加了一些类型。只不过声明的时候记得加 `:类型名称`

### 基本数据类型

```typescript
let a:number = 1;
let bool:boolean = true;
let b:string = 'hello world';
let c:string = `${b}`;
// 其实还有 null 和 undefined 类型，但是声明它们也没什么用，就不使用它们了。
```

### 数组

```typescript
let list:number[] = [1,2,3];		// 推荐
let a: Array<number>= [1,2,3];		// 使用泛型创建数组，和上一句效果一样
```

## 元组

```typescript
let x:[string,number] = ['12',1];	// 像这样声明赋值的时候，前一个必须是字符串，后一个必须是数字，而且只能是两个元素，其他情况都会报错。
```

> `x[3] = 2` 这样的添加元素会报错；如果后面添加元素使用的是 `push` 的话，必须是 `string` 和 `number` 类型的，其他类型会报错。

### 枚举

```typescript
enum myNumber{
    one = 1,
    two,
    three,
}
// 枚举类型 JavaScript 没有。和 java 的枚举一样，都是使用枚举来将名字弄得更友好
```

`one = 1` 是什么意思？就是从 `one = 1` 开始，依次 `two = 2` ... ，当然你也可以手动赋值也是可以的

我们可以看看编译过来的源码, `.js`:

```js
var myNumber;
(function (myNumber) {
    myNumber[myNumber["one"] = 1] = "one";
    myNumber[myNumber["two"] = 2] = "two";
    myNumber[myNumber["three"] = 3] = "three";
})(myNumber || (myNumber = {}));
```

可以通过 `myNumber.one` 获取 `1`，也可以通过 `myNumber[1]` 获取 `'one'`。

> 枚举其实就是对象

### Any

有的时候，我们在写的时候，我们自己都不知道是什么类型（主要是类型可能变动），这时候我们就可使用 `any` 类型，能直接跳过编译阶段的检查。

```typescript
let x:any = 4;
x = 'sdfsdf';
x = 1123;
```

还有忘说了，如果你直接这样写 `let x = 1` ，**typescript** 会直接推断类型为 `number` ，后面赋值其他类型就会报错。

### void

某种程度上来说，`void`类型像是与`any`类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 `void`：

```typescript
function print(b) :void {
    console.log(b)
}; // void 表示空值，就是没什么东西，在这里就是不返回值。
```

### Never

`never`类型表示的是那些永不存在的值的类型。 例如， `never`类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 `never`类型，当它们被永不为真的类型保护所约束时。

```typescript
function error(message: string) : never {
    throw new Error(message);
}
error('你好');
```

> `never`类型是任何类型的子类型，也可以赋值给任何类型；然而，*没有*类型是`never`的子类型或可以赋值给`never`类型（除了`never`本身之外）。 即使 `any`也不可以赋值给`never`。

### Object

学过 JavaScript 应该都知道这是什么。

```typescript
let obj: object = {x:1};
```

### 类型转换

typescript 中就是**类型断言**，告诉机器`我知道我在干什么`，有两种方法：

```typescript
// 第一种，使用 <>
let str: any = "this is a string";
let strLength: number = (<string>str).length

// 第二种，使用 as
let str: any = "this is a string";
let strLength: number = (str as string).length;
```



## 变量声明

`var` 是 es5 的知识，不了解的可以看 《JavaScript高级程序设计》

`let` 和 `const ` 是 es6 的知识，可以去看阮老师的 <https://es6.ruanyifeng.com/> es6 教程，也可以去看我以前写过的 es6 博客。

## 解构

还不熟悉的 **解构** 的建议去看 <https://es6.ruanyifeng.com/#docs/destructuring>

我写一下元组、数组、对象的结构

```typescript
// 元组
let input:[number,string] = [1,"sdf"];
let [first,second]:[number,string] = input;
// 数组
let [a, ...b] = [1,2,3,4];
// 对象
let x = {
    a: 1,
    b:"sdfsdf",
    c:3,
}
let {a,b}:{a:number,b:string} = x;
```

还有扩展

```typescript
// 数组
let one = [1,2,3];
let two = [5,6];
let mynum = [0,...one,...two];
// 对象
let defaults = {
    one:1,
    two:2,
    three:3
}
let search = {...defaults,one: 11};

```

## 接口

这个 **接口** es6 是没有的，是 typescript 才有的(Java早就有了)，所以这个需要重点掌握。

### 什么是接口？

简单来说，就是人为定义的一套标准，如果你想要通过我这个标准就必须遵守我这个标准，否则就是会报错的。举例：我们使用的网线的水晶头（全世界通用，都采用RJ-45 这个标准），这里的水晶头就是我说的接口。

看一下官方的定义:

> TypeScript的核心原则之一是对值所具有的*结构*进行类型检查。 它有时被称做**“鸭式辨型法”**或**“结构性子类型化”**。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。

### 定义

```typescript
// 定义
interface LabelledValue{
    label:string
}
// 定义
function printtable(labelledObj: LabelledValue) { // 使用
    console.log(labelledObj.label);
}

let myObj = {size:10,label: 'Size 10 Object'};

printtable(myObj);

```

传过来的参数 `myObj` 中必须有 `label` 属性，并且还必须是 `string` 类型，否则就会报错。你也肯定注意到了，这里多了一个 `size` 的属性，也就是说，传递过来的对象可以包含更多的属性，但前提还要包含接口中的属性，否则也是会报错的。

### 可选属性

可选属性就是在有的时候需要使用，有的时候不需要使用，这个时候我们就可使用属性，让函数传入的对象只有部分属性赋值

```typescript
interface SquareConfig {
    color?: string;
    width?: number;
}
  
function createSquare(config: SquareConfig): {color: string; area: number} {
    let newSquare = {color: "white", area: 100};
    if (config.color) {
        newSquare.color = config.color;
    }
    if (config.width) {
        newSquare.area = config.width * config.width;
    }
    return newSquare;
}

let mySquare = createSquare({color: "black"});

```

以上例子就可以看到，在 `color` 和 `width` 属性后面加一个 `?` （英文问号）就表示该属性是可选的属性了

### 只读属性

听名字就知道怎么回事哈！就是传入的值是**只读**的，是不可以进行修改的。在对象中只需要在前面加一个 `readonly` ，使用泛型创建只读数组的话可以使用 `ReadonlyArry` ，这个其实也是官方定义的一种借口，底层还是使用的 `readonly` 。

```typescript
interface Point {
    readonly x: number;
    readonly y: number;
}
let p1: Point = { x: 10, y: 20 };
p1.x = 5; // error!
let a: number[] = [1, 2, 3, 4];
let ro: ReadonlyArray<number> = a;
ro[0] = 12; // error!
ro.push(5); // error!
ro.length = 100; // error!
a = ro; // error!
```

以上的例子是官方的

### 额外属性检查

简单的理解就是通过一些手段绕过 **对象字面量** 的检查。

给一个官方的例子：

```typescript
interface SquareConfig {
    color?: string;
    width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
    // ...
}

let mySquare = createSquare({ colour: "red", width: 100 });
```

注意我传入的参数并是 `colour` ，并不是 `color` 这时候 typescript 的会报错，那如何让检查通过呢？

**第1种**

修改

```typescript
let mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig);
```

使用**类型转换**可以

**第2种 (推荐)**

修改**接口**

```typescript
interface SquareConfig {
    color?: string;
    width?: number;
    [propName: string]: any;
}
```

添加了 `[propName: string]: any` 就会无视你传入的什么东西，都会通过。其实它是一种 **索引**，后面会提到

**第3种**

将你需要传入的东西先赋值给一个变量，之后在传入这个变量，这样也可以跳过检查

```typescript
let squareOptions = { colour: "red", width: 100 };
let mySquare = createSquare(squareOptions);
```

> 其实个人感觉这个 **额外属性检查** 一般我们都不会使用到，感觉有点鸡肋，最好还是不要使用，如果你有一些特殊的用途的话可以考虑一下。

### 函数类型

函数类型的接口感觉有点奇怪。

```typescript
interface SearchFunc {
  (source: string, subString: string): boolean;
}
```

这样我就定，义了一个函数类型的接口，也可以叫 **调用签名** ，括号里面的就是函数的 **参数**，冒号后面的就是 **返回参数的类型**。

使用它的时候就像下面那样使用它：

```typescript
let mySearch: SearchFunc;
mySearch = function(source: string, subString: string) : boolean {
  let result = source.search(subString);
  return result > -1;
}
```

其实函数的参数名不需要与接口里定义的名字相匹配，甚至我们可以省略一些参数，毕竟 typescript 可以推断的。

```typescript
let mySearch: SearchFunc;
mySearch = function(src, sub) {
    let result = src.search(sub);
    return result > -1;
}
```

### 索引的类型

简单理解就是 **可以通过索引来获取值**，可以分为 **字符串类型的索引** ，**数字类型的索引**

```typescript
interface StringArray {
    [index: number]: string;
}
  interface obj {
    [index: string]: string;
}
```

还可以将返回类型弄成自己定义的类名：

```typescript
class Animal {
    name: string;
}
class Dog extends Animal {
    breed: string;
}

// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!
interface NotOkay {
    [x: number]: Animal;
    [x: string]: Dog;
}
```

这里会报错的，typescript 规定：**同时使用两种类型的索引时，数字索引的返回值必须是字符串索引返回值类型的子类型** ，你只需要把 `Animal` 和 `Dog` 互换一下就行了。这种设计是为了在使用 `数字` 进行访问值的时候可以转换为 `string` 来进行访问，例如 **x[0] 转换为 x['0']**

```typescript
interface NumberDictionary {
  [index: string]: number;
  length: number;    // 可以，length是number类型
  name: string       // 错误，`name`的类型与索引类型返回值的类型不匹配
}
// 上面的代码修改后，可以创建对象
let x : NumberDictionary;
x={length:0,name:1};
```

对了，还可以进行只读设置

```typescript
interface ReadonlyStringArray {
    readonly [index: number]: string;
}
let myArray: ReadonlyStringArray = ["Alice", "Bob"];
// 这两种创建方法是一个意思，上面等于下面，下面也等于上面
let myArray: ReadonlyStringArray = {
    0:'Alice',   1: 'Bob',
}
myArray[2] = "Mallory"; // error!
```

### 类类型

像 java 一样我们可以使用接口来定义类，通过定义接口来对类的属性和方法进行约束。

```typescript
interface ClockInterface {
    currentTime: Date;
    setTime(d: Date);
}

class Clock implements ClockInterface {
    currentTime: Date;
    setTime(d: Date) {
        this.currentTime = d;
    }
    constructor(h: number, m: number) { }
}
```

`implements` 实现继承时，类要自己实现所有的接口，接口中的类是公共部分，类中可以定义一些私有部分

**类静态部分与实例部分的区别**

类是具有：静态类型和实例类型两种的，官网实例

```typescript
interface ClockConstructor {
    new (hour: number, minute: number);
}

class Clock implements ClockConstructor {
    currentTime: Date;
    constructor(h: number, m: number) { }
}
```

它会报错，为什么？其中 constructor存在于类的静态部分，而类实现的接口是一个实例类型，两者之间是会出问题的。如果想要使用，可以这样

```typescript
interface ClockConstructor {
    new (hour: number, minute: number): ClockInterface;
}
interface ClockInterface {
    tick();
}

function createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {
    return new ctor(hour, minute);
}

class DigitalClock implements ClockInterface {
    constructor(h: number, m: number) { }
    tick() {
        console.log("beep beep");
    }
}
class AnalogClock implements ClockInterface {
    constructor(h: number, m: number) { }
    tick() {
        console.log("tick tock");
    }
}

let digital = createClock(DigitalClock, 12, 17);
let analog = createClock(AnalogClock, 7, 32);
```

### 继承接口

类可以继承接口，当然，接口也是可以进行继承的。

**单接口的继承**

```typescript
interface Shape {
    color: string;
}

interface Square extends Shape {
    sideLength: number;
}

let square = <Square>{};
square.color = "blue";
square.sideLength = 10;
```

**多接口的继承**

```typescript
interface Shape {
    color: string;
}

interface PenStroke {
    penWidth: number;
}

interface Square extends Shape, PenStroke {
    sideLength: number;
}

let square = <Square>{};
square.color = "blue";
square.sideLength = 10;
square.penWidth = 5.0;
```

### 混合类型

可以让一个对象同时具有函数和对象的特性。

```typescript
interface Counter {
    (start: number): string;
    interval: number;
    reset(): void;
}

function getCounter(): Counter {
    let counter = <Counter>function (start: number) { };
    counter.interval = 123;
    counter.reset = function () { };
    return counter;
}

let c = getCounter();
c(10);
c.reset();
c.interval = 5.0;
```

### 接口继承类

接口也是可以继承类的。但是使用的场景并不多。

```typescript
class Control {
    private state: any;
}

interface SelectableControl extends Control {
    select(): void;
}

class Button extends Control implements SelectableControl {
    select() { }
}

class TextBox extends Control {
    select() { }
}

// 错误：“Image”类型缺少“state”属性。
class Image implements SelectableControl {
    select() { }
}

class Location {

}
```

并不常用