## REST 是什么

REST 全称 **Representational State Transfer** ，它不是业界哪个组织规定的规范，它是一种万维网软件架构的**风格** ，它是用来创建网路服务的。

- **Representational** ：这里的含义是 **数据的表现形式** （JSON、XML......），常用 JSON 数据格式
- **State** ：当前状态或者数据，描述当前处于那种状态（增、删、改、查）
- **Transfer** ：数据传输，数据在互联网上传输，（服务器传到客户端）

## REST 6 个限制

### 客户-服务器（Client-Server）

这种CS架构现在都在使用，但值得一提的是，它客户端和服务器端进行了分离，其优点有：

- 关注点分离
- 服务端专注数据存储，提示了简单性（不用渲染用户界面）
- 前端专注用户界面，提示了可移植性（不用关心数据）

### 无状态（Stateless）

无状态：**将所有的用户会话信息都保存在客户端** ，所以每次请求必须包括所有信息，不能依赖上下文信息（例如服务器不会保存客户端的当前页数，只能在客户端保存）

那有什么好处呢？

好处就是：服务端不用保存会话信息，提示了简单性、可靠性、可见性

### 缓存（Cache）

缓存的意思是：所有服务器响应都要被标为可缓存或不可缓存，**可缓存**一般存储的是**不变的**（Css，JS，HTML文件），**不可缓存** 一般存储的都是**可变的**，这样就可以：**减少前后端交互，提示了性能**

### 统一接口（Uniform Interface)

这个现在是最要的

你想接口设计尽可能统一通用，提升了简单性、可见性。接口实现解耦，使前后端可以独立开发迭代

### 分成系统（Layered System）

每层只知道相邻的一层，后面隐藏的就不知道了，这样就会让客户端不知道是和代理还是和真实服务器通信

现在的企业系统分为很多层，例如：安全层、负载均衡、缓存层等。

### 按需代码（Code-On-Demand 可选）

客户端可以下载运行服务端传来的代码（例如JS），我们通过减少一些功能，简化了客户端

## 统一接口的限制

- **资源的标识**
  - 资源是任何可以命名的事物，比如用户、评论等
  - 每个资源可以通过 URI 被唯一的标识
- **通过表述来操作资源**
  - 表述就是 Representation，比如 JSON、XML 等
  - 客户端不能直接操作（比如 SQL）服务器资源
  - 客户端应该通过表述（比如 JSON）来操作资源
- **自描述信息**
  - 每个信息（请求或响应）必须提供足够的信息让接受者理解
  - 媒体类型（application/json、application/xml）
  - HTTP 方法：GET（查）、POST（增）、DELETE（删）
  - 是否缓存：Cache-Control
- **超媒体作为应用状态引擎**
  - 超链接：带文字的连接
  - 应用状态：一个网页
  - 引擎：驱动、跳转
  - 合起来就是：点击链接跳转到另一个网页

## RESTful API

**RESTful API** ：表示**符合 REST 架构风格的 API**

那具体点是什么呢？

- 基本的 URI（统一资源定位符），如 https://api.github.com/users 等
- 标准的 HTTP 方法，如 GET，POST，PUT，PATCH，DELETE
- 传输的数据媒体类型，如 JSON，XML

例子：

- GET 		/users 		# 获取 user 列表
- GET 		/users/12	# 查看某个具体的 user
- POST 		/users 		# 新建一个 user
- PUT 		/users/12	# 更新 user 12
- DELETE		/users/12	# 删除 user 12

## RESTful 最佳设计规范

其实就是请求接口的设计

- **URI** 使用**名词**，尽量使用复数，如 /users
- **URI** 使用**嵌套**表示**关联关系**，如 /users/12/repos/5
- 使用正确的 HTTP 方法，如 GET/POST/PUT/DELETE
- 不符合 CRUD（增删改查）的情况：POST/action/子资源

## 响应设计规范

就是接口的返回值

- 查询：就是每一个请求的接口都是可以查询过滤的
- 分页：如果查询出来的列表很长的话，应该弄成分页
- 字段过滤：只能返回指定的字段
- 状态码：返回正确的状态码 
- 错误处理：假如请求是错误的，你应该返回规范的错误信息

## 安全

- https
- 鉴权
- 限流

## 开发者友好

- 文档
- 超媒体

