## ls 指令

```shell
ls (list)
```

### 用法一 

列出当前工作目录下的所有文件/文件夹的名称：

```shell
ls
```

### 用法二 

列出指定路径下的所有文件/文件夹的名称

```shell
ls 路径
```

路径分为：

- 绝对路径 （绝对路径不需要参照物，直接从根 `/` 开始寻找对应路径）
- 相对路径 （相对路径首先得有一个参照物，一般就是当前的工作路劲）
  - `./` 表示当前路径下
  - `../` 表示上一级路径下

### 用法三

列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示

```shell
ls 选项 路径 
```

常见的选项有：

- `#ls -l 路径`
- `#ls -la 路径`

其中：

- `-l`
  - 表示 list 的意识，表示以详细列表的形式进行展示
- `-a`
  - 表示显示所有的文件/文件夹 (包含了隐藏的文件/文件夹)
 ![在这里插入图片描述](http://zhaosirlaile.oss-cn-beijing.aliyuncs.com/contentImg/20190402141348253.png)

如上图所示：

第一列（红色方框框起来的部分）表示文档的类型，其中：

- `-` 
  - 表示文档类型为`文件`
- `d`
  - 表示文档类型为`文件夹`

`注：在 Linux 中隐藏 文件一般都是以 "." 开头`

### 用法四

列出指定路径下的文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以比较人性化的形式显示：

```shell
ls -lh 路径
```



### ls 中列出的颜色

其中:

- `黑色` 表示文件夹
- `蓝色` 表示文件
- `绿色` 表示当前用户的权限为拥有所有的权限



## pwd 指令

pwd （print working directory），打印当前工作目录 (`绝对路径`)

```shell
pwd
```

## cd 指令

cd    (change directory) ，用于切换当前的工作路径

```shell
cd 路径
```

`注: 在 Linux 中有一个特殊的符号 "~"(波浪号)，表示当前用户的家目录`

## mkdir 指令

mkdir  (make directory, 创建目录)

### 用法一

```shell
mkdir 路径
```

路径：可以是文件夹名称也可以是包含名称的一个完整路径

### 用法二

可以一次性创建多层不存在的目录的时候，添加 `-p` 参数，否则会报错

```shell
mkdir -p 路径
```

### 用法三

可以一次性创建多个目录

```shell
mkdir 路径1 路径2 路径3
```

## touch 指令

touch (创建文件)

### 用法一

```shell
touch 文件路径
```

### 用法二

一次性创建多个文件

```shell
touch 路径1 路径2 路径3
```

## copy 指令

 cp （copy, 复制），复制文件/文件夹到指定的位置

```shell
cp 复制的文档路径 目标的文档路径
```

`注意：当时用 "cp" 指令进行文件夹复制操作的时候需要添加选项 "-r"，否者目录将会被忽略，（"-r" 表示递归复制）`

## mv 指令

mv  (move,移动,剪切)  ，移动当前文档到新的位置

```shell
mv 需要移动的文件路径 目标的文档路径
```

`注：在 Linux 'mv'命令也是重命名`

## rm 指令

rm （remove ，删除，移除）

```shell
rm 选项 需要移出的文档路径
```

选项有：

- -f
  - 表示 force（强制），就不会有提示（是否删除）
- -r
  - 递归删除

删除一个文档

```shell
rm 文档路径
```

删除一个目录

```shell
rm -rf 目录路径
```

删除多个文档

```shell
rm -rf 路径1 路径2...
```

删除以 demo 开头的文档

```shell
rm -f demo*
```

`注：'*'称为通配符，意识表示任意的字符，demo*,这表示只要文件 demo 开头，后续字符则不管`

## vim 指令

vim  (vim 是一款文本编辑器，使用 vim 打开文件)

```shell
vim 文件路径
```



退出 vim

按下`shift + 英文冒号`，输入 `q`, 按下回车即可



## 输出重定向

一般命令的输出都会显示到终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到输出重定向技术

- `>` : **覆盖**输出，会覆盖掉原先的文件内容
- `>>` : **追加**输出，不会覆盖原始文件内容，会在原始内容末尾继续添加

```shell
正常执行的指令 >/>> 文件路径
```

其中：

文件路径可以不存在，那么就会新建文件



## cat 指令

### 方法一

cat （直接打开一个文件的功能）

```shell 
cat 文件的路径
```

### 方法二

cat   (可以对文件进行合并)

```shell
cat 待合并的文件路径1 待合并的文件路径2... 文件路径n > 合并之后的文件路径
```

## df 指令

df （查看磁盘空间）

```shell
df -h
```

## free 指令

free （查看内存使用情况）

```shell
free -m
```

- `-m` 以`MB`为单位进行查看
- `-g` 以`GB`为单位进行查看

## head 指令

head （查看一个文件的前 n 行，如果不指定n，则默认显示前10行。）

```shell
head -n 文件路径
```

其中 n 表示数字，查看那前 n 行的数据

## tail 指令

### 用法一

tail （查看一个文件的末 n 行，如果 n 不指定，则默认显示后10行）

```shell
tail -n 文件路径
```

### 用法二

tail（可以通过 tail 指令来查看一个文件的动态变化）

```shell
tail -f 文件路径
```

一般用来查看系统的日志文件

## less 指令

less（查看文件，以较少的内容进行输出，按下辅助功能键（数字 + 回车、空格键 + 上下方向键）查看更多

```shell
less 文件路径
```

## wc 指令

wc （统计文件内容信息，例如：行数，单词数，字节数）

```shell
wc -lwc 文件路径
```

其中：

- `-l` : 表示 lines，行数
- `-w` : 表示 words,单词数
- `-c` : 表示 bytes, 字节数

## date 指令

### 用法一

data （表示操作系统时间日期，可以进行读取、设置等）

```
date
```

### 用法二

```shell
date +%F
```

### 用法三

```shell
date "+%F %T"
```

### 用法四

获取之前或者之后的某个时间（备份）

```shell
date -d "-1 day" "+%Y-%m-%d %H:%M:%S"
```

其中：

- `-` 表示：之前
- `+` 表示：之后



- `day` 表示：天
- `month` 表示： 月份
- `year` 表示： 年



- `%F` 表示： 完整的年月日
- `%T` 表示： 完整的时分秒
- `%Y` 表示： 四位年份
- `%m` 表示： 两位月份
- `%d` 表示： 两位日期
- `%H` 表示： 两位小时
- `%M` 表示： 两位分钟
- `%S` 表示： 两位秒数

## cal 指令

cal （用来操作日历）

### 用法一

直接输出当期月份的日历

```shell
cal
```

### 用法二

```shell
cal -3
```

## clear/ctal + L 指令

清除终端中已经存在的命令和结果（信息）

```shell
clear
```

## 管道

管道符：`|`

一般可以用于

- `过滤`
- `特殊`
- `扩展处理`

管道不可以单独使用，必须配合其他指令一起使用，起作用`主要是辅助作用`。

```shell
ls /|grep y
```

`/` 表示根目录下的文件

`|` 以管道符作为分解线，管道符前面的输出就是后面指令的输入

`grep` 指令：主要用于过滤
## hostname 指令

hostname （操作服务器的主机名，进行读取，设置）

### 用法一

输出完整的主机名

```shell
hostname
```

### 用法二

输出当前主机名中的 FQDN （全限定域名）

```shell
hostname -f
```

## id 指令

id （查看一个用户的一些基本信息，包含用户id，用户组id，附加组id ...）

### 用法一

该指令如果不指定用户则默认当前用户

```shell
id
```

### 用法二

显示指定用户的基本信息

```shell
id 用户名
```

## whoami 指令

显示当前登录的用户名，一般用于 shell 脚本,方便记录日志

```shell
whoami
```

## ps 指令

ps （主要是查看服务器的进程信息）

```shell
ps -ef
```

- `-e` : 等价于 "`-A`",表示列出全部进程
- `-f` : 列出全部的列（显示全字段）

![在这里插入图片描述](http://zhaosirlaile.oss-cn-beijing.aliyuncs.com/contentImg/20190402141721230.png)
如上图所示：

- `UID` : 该进程执行的用户 id
- `PID` : 进程 id
- `PPID` : 该进程的父级进程 id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程
- `C` : CPU 的占用率，其形式是百分数
- `STIME` : 进程的启动时间
- `TTY` : 终端设备，发起该进程的设备识别符号，如果现实 "?" 则表示该进程并不是由终端设备发起：
- `TIME` : 进程的执行时间
- `CMD` : 该进程的名称或者对应的路径

### 用法一

在 ps 指令中过滤，找出结果

```shell
ps -ef|grep 进程名称
```

## top 指令

top （查看服务器的进程占的资源）

```shell
top
```

按 `q` 键退出
![在这里插入图片描述](http://zhaosirlaile.oss-cn-beijing.aliyuncs.com/contentImg/20190402141801206.png)
如上图所示：

- `PID` : 进程 id
- `USER` : 该进程的对应的用户
- `PR` : 优先级
- `VIRT` : 虚拟内存
- `RES` : 常驻内存
- `SHR` : 共享内存
  - 计算一个进程实际使用的内存 = 常驻内存(RES) - 共享内存(SHR)
- `S` : 表示进程的状态（sleeping ,其中 S 表示睡眠，R 表示运行）
- `%CPU` : 表示 CPU 的占用百分比
- `%MEM` : 表示内存的占用百分比
- `TIME+` : 执行的时间
- `COMMAND` : 进程的名称或者路径

在运行 `top` 的时候，可以按下方便的快捷键:(按下以下字母)

- `M` : 表示将结果按照内存 （MEM）从高到底进行降序排列;
- `P` : 表示将结果按照 CPU 使用率从高到低降序排列
- `1` : 当服务器有多个 CPU 的时候 可以使用 "1" 快捷键来切换是否展示各个 CPU 的详细信息

## du 指令

du （查看目录的真实大小）

```shell
du -sh 文件路径
```

选项含义：

- `-s` : summaries, 只显示汇总的大小
- `-h` : 表示以高可读性的形式进行显示

## find 指令

find （用于查找文件,隐藏文件也可以收出来）

```shell
find 路径范围 选项 选项的值
```

选项：

- `-name` : 按照文档名称进行搜索（支持模糊搜索）

- `-type` : 按照文档类型进行搜索
  - `文档类型` 
    - `-` : 表示文件（在使用 find 的时候需要用 `f` 来替换）
    - `d` : 表示文件夹 

### 用法一

```shell
find /home/demo -name demo.txt
```

### 用法二

```shell
find /root -name *.txt
```

### 用法三

```shell
find /root -type f
```

## service 指令

service （用于控制一些软件的服务启动/停止/重启）

```shell
service 服务名 start/stop/restart
```

其中:

- `start` : 表示启动服务器
- `stop` : 表示关闭服务器
- `restart` : 表示重启服务器

## kill 指令

kill （表示杀死进程，当遇到僵尸进程或者出于某些原因需要关闭进程的时候，一般与 ps 指令配合使用）

```shell
kill 进程PID 
```

## killall 指令

killall （效果和 kill 指令一样）

```shell
kill 进程名称
```

## ifconfig 指令

ifconfig （获取操作网卡相关的指令）

```shell
ifconfig
```

![在这里插入图片描述](http://zhaosirlaile.oss-cn-beijing.aliyuncs.com/contentImg/20190402141902339.png)

如上图所示：

`inet addr` : 表示网卡的 ip 地址

## reboot 指令

reboot （重新启动计算机）

### 用法一

```shell
reboot
```

### 用法二

```shell
reboot -w
```

## shutdown 指令

shutdown （关机，慎用）

### 用法一

立即关机

```shell
shutdown -h now "关机提示信息"
```

## 用法二

定时关机

```shell
shutdown -h 15:23 "关机提示信息"
```

取消关机：

- `ctrl + c` 

  - 基于 CentOs 7.0以前的版本

- ```shell
  shutdown -c
  ```

  - 基于 CentOs 7.0 以后的版本

## uptime 指令

uptime （输出计算机的持续在线时间，就是计算机从开机到现在运行的时间）

```shell
uptime
```

## uname 指令

uname （获取计算机操作系统相关信息）

### 用法一

获取操作系统的类型

```shell
uname 
```

### 用法二

表示获取操作系统全部的信息（类型、全部的主机名、内核版本、发布时间、开源计划）

```shell
uname -a
```

## netstat

netstat 查看网络的连接状态

```shell
netstat -tnlp
```
![在这里插入图片描述](http://zhaosirlaile.oss-cn-beijing.aliyuncs.com/contentImg/20190402141928115.png)
如上图所示，选项：

- `-t` : 表示只列出 tcp 协议的连接
- `-n` : 表示将地址从字母组合转化为 IP 地址，将协议转化成端口号来显示
- `-l` : 表示过滤出 "stat" （状态） 列中其值为 LISTEN（监听）的连接： 
- `-p` : 表示显示发起连接的进程 pid 和进程名称

## man 指令

man （manual，手册，包含了 Linux 中全部命令手册，不过是全英文的）

```shell
man 指令
```

按下 `q` 键退出

参考资源：
https://www.bilibili.com/video/av23360560/

时间：2019年4月2日14:20:21